import { rgb } from "color-convert";
import { resolve } from "node:path";
import { Parser } from "xml2js";

const itermColorsFilePath = resolve(
  import.meta.dir,
  "..",
  "dogwater.itermcolors"
);

const itermColorsFile = Bun.file(itermColorsFilePath);

const parser = new Parser();
const unparsedItermColors = await itermColorsFile.text();

const parsedItermColors = await parser.parseStringPromise(unparsedItermColors);

const {
  dict: colorSRGBDefinitions,
  key: colorNames,
}: { dict: { real: string[] }[]; key: string[] } =
  parsedItermColors.plist.dict[0];

const itermColors = colorNames.map((colorName, i) => {
  const [a, b, g, r] = colorSRGBDefinitions[i].real;

  return {
    a: parseFloat(a),
    b: parseFloat(b) * 255,
    g: parseFloat(g) * 255,
    name: colorName,
    r: parseFloat(r) * 255,
  };
});

function toCamelCase(spaceDelimitedString: string) {
  return spaceDelimitedString
    .toLowerCase()
    .split(/\s+/)
    .map((word, index) =>
      index === 0 ? word : word[0].toUpperCase() + word.substring(1)
    )
    .join("");
}

const generatedLuaColors = [
  "-- DO NOT MODIFY: this file is generated by scripts/generate-lua-colors.ts",
  "local dogwaterColors = {",
  itermColors
    .map(
      ({ b, g, name, r }) => `  ${toCamelCase(name)} = "#${rgb.hex(r, g, b)}"`
    )
    .join(",\n"),
  "}",
  "",
  "return dogwaterColors",
  "",
].join("\n");

const generatedLuaColorsFilePath = resolve(
  import.meta.dir,
  "..",
  "lua",
  "colors.gen.lua"
);

await Bun.write(generatedLuaColorsFilePath, generatedLuaColors);
